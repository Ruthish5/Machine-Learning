import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score

np.random.seed(0)
X = np.random.rand(100, 1) * 10
y = 3 * X.squeeze() + np.random.normal(0, 3, size=100)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)

degree = 2 
poly_features = PolynomialFeatures(degree=degree)
X_poly = poly_features.fit_transform(X_train)
poly_model = LinearRegression()
poly_model.fit(X_poly, y_train)

X_test_poly = poly_features.transform(X_test)
y_pred_poly = poly_model.predict(X_test_poly)

mse_lr = mean_squared_error(y_test, y_pred_lr)
r2_lr = r2_score(y_test, y_pred_lr)
mse_poly = mean_squared_error(y_test, y_pred_poly)
r2_poly = r2_score(y_test, y_pred_poly)

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.scatter(X_test, y_test, color='blue')
plt.plot(X_test, y_pred_lr, color='red', linewidth=2)
plt.title(f'Linear Regression\nMSE: {mse_lr:.2f}, R^2: {r2_lr:.2f}')
plt.xlabel('X')
plt.ylabel('y')

plt.subplot(1, 2, 2)
plt.scatter(X_test, y_test, color='blue')
plt.plot(X_test, y_pred_poly, color='red', linewidth=2)
plt.title(f'Polynomial Regression (Degree {degree})\nMSE: {mse_poly:.2f}, R^2: {r2_poly:.2f}')
plt.xlabel('X')
plt.ylabel('y')

plt.tight_layout()
plt.show()
